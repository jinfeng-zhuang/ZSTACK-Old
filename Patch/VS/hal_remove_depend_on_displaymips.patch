diff --git a/CpuComm/Src/thal_cpucomm_api.c b/CpuComm/Src/thal_cpucomm_api.c
old mode 100644
new mode 100755
index af593c16..f86a752f
--- a/CpuComm/Src/thal_cpucomm_api.c
+++ b/CpuComm/Src/thal_cpucomm_api.c
@@ -224,7 +224,7 @@ static int CpuStatus = 0; /* -1 reset, 0 not ready, 1 ready */
 int CheckCpusReady(void) {
     CPUStateInfo CpuSI;
     if (CPUComm_fd < 0) return 0;
-    CpuSI.cpuID = CPU_MAX_NONE;
+    CpuSI.cpuID = CPU_AV;
     CpuSI.act = CPU_STATE_APP_READY_GET;
 
     APP_IOCNTL(ioctl(CPUComm_fd, CPU_COMM_CPU_STATE, &CpuSI));
@@ -621,7 +621,12 @@ RETURN_TYPE Trid_Util_CPUComm_Call(const trid_char* FuncName, Trid_CPUFuncCall_P
     TRID_DEBUG("RPC call -- %s()\n", FuncName);
     sprintf(buf, "%s_%1lx_%3.3lx", FuncName, pCallParam->Connection.targetCPU, (pCallParam->Connection.targetTokenPid & 0xfff));
     FuncID = Trid_Util_Name2ID(buf);
-    while (r == SYS_FAILED) {
+
+    if (pCallParam->Connection.targetCPU == CPU_DISP) {
+        TRID_ERROR("RPC call -- %s()\n", FuncName);
+        return SYS_NOERROR;
+    }
+     while (r == SYS_FAILED) {
         r = CPUComm_CallEx(FuncID, pCallParam, pCallReturn, trid_false);
         if (r == SYS_FAILED) {
             TRID_ERROR(
